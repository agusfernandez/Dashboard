1) instalar Formik (permite automatizacion de validaaciones de forms)
npm install formik --save
https://formik.org/docs/overview

2) crear carpeta pages > Login>index.js (toma ek index.js //como un export const)
3) include Formik _ initialValues{{ objeto}}
el valor del name tiene q tener la misma nomenclatura entre los iniital values 
4) include Form (de Formik)

error!! me dio un error cuando agregue los <></> en el app.js y een el formik (probar de sacarlos)

-useFormik es un hook de formik que permite usar las validaciones de formik en otras librerias

5) yup es una libreria de npm // permite generar validaciones
https://www.npmjs.com/package/yup

npm i yup
import * from yup (trae todo lo que hay en yup bajo yup)
esquema de validacion del formulario // validationShema
Yup.object

//validationShema : ingresar la logica de la validacion

6) instalar material
https://material-ui.com/

npm install @material-ui/icons
npm install @material-ui/core

OJO que cambio la version de material

7) import TextForm
import Button
import Link (new registry)

8) components > LoginForm // logica del log in con el uso de Yup y Formik como principales herrramientas de 
usar {useFormik} directamente

const Formik = useFormik({
    initalValues:{

    },
    validationSchema:Yup.object({

    }),
    onSubmit:

})

>RegisterForm
Recordar de agregar en los forms el name, id, label>

.matches (funcion de Yup que permite agregar expresiones regulares para una validacion)
valor key // clave para imprimir una vez las cosas 

const Formik = useFormik({
    initalValues:{

    },
    validationSchema:Yup.object({

    }),
    onSubmit:

})

//// checkbox information> guardar el estado de los datos de las persona q se acaba de registrar
    const [interestMovies, setInterest] = useState({
        peliculas: false,
        series: false,
        ambas: false,        
        ninguna: false
    })

    // va a recibir un evento y va  setear los intereses
    const handleCheckbox =(event) =>{
        setInterest({...interestMovies, [event.target.name]: event.target.checked})
    }
guardar la info se puede hacer a traves de Redux para ser usado en otros componentes pero por ahora se puede hacer a traves de yb estado global en app.js
Seteo el estado global y le paso la prop al page de register ( q es esta ahi mismo) // luego lo paso en Register.js y RegisterForm.js. Luego en el submite le saco la alerta y pongo el setUser
const [user, setUser] = useState({})

9) Creacion de la pagina Home /intente crearlo tipo componente pero no me funciono
-  incoporporacion de Menu/ Drawer (funcionalidad)

// se agrega el menu

10) Routes
npm i --save react-router-dom 

import{
    BrowserRouter as Router,
    Switch,
    Route,
    Link,
    Redirect
} from 'react-router-dom'

// Link funcionalidad que redirije donde iria la ruta
// Switch cambia al renderizado de la ruta
// Setear la ruta desde la mas general a la mas especifica y con la prop exact evito q se quede con la ruta del /
// el return que esta devolviend lo hacemos a traves de un router

const Routes = ()=>{
    return (
        <Router>
            <h1>Movie Dashboard</h1>
            <Link to='/'>
                Home
            </Link>   
            <Link to='/movies'>
                Movies
            </Link>  
            <Link to='/series'>
                Movies
            </Link>
            <Link to='/contacto'>
                Contacto
            </Link> 
            <Switch>
                <Route path='/movies'>
                   Movies
                </Route>
                <Route path='/series'>
                   Series
                </Route>
                <Route path='/contacto'>
                   Contacto
                </Route>
                <Route exact path='/'>
                   Home
                </Route>
            </Switch>
        </Router>
    )
}

<Switch> cambia de "ruta"

11) Rutas privadas
Se pueden crear las rutas de forma manual a traves de un componente nuevo
// es pro o no?

crear una condicion

let tipodeSuscricion = 'base'

  const routerPrivate=({component: Component, ...rest})=>{
      return(
        <Route  {...rest}>
           {tipodeSuscricion ==='pro' ? <Component/> : <Redirect to='/' />}
        </Route>
      )
    }
 y agregarlo en el Switch y agregar el componente creado de esa ruta privada

    <routerPrivate exact path='/herramientasPrivada' component={herramientasPro}> //nombre del componente creado
        Ruta privadas
    </routerPrivate>

12) Redux> nos permite manejar el estado global de la app
//estructura

.store
se guarda el estado global

.actions (useReducer)
constantes CONST 
las actions describen que acciones se van a realizar para modificar le estado

.reducer 
describir como la accion va a cambiar el estado actual en el siguiente

.dispatch
son las formas en que se ejecutan las acciones

el flujo va a ser:
store->dispatch ->action -> reducer ->(va a modificar el estado global)


// estructura Redux

a) crear carpeta _ reducers y actions
b) crear las actions->nuevo archivo index.js / devolviendo el objeto
ejemplo: Guardar el estado global el logueo
- creo las actions
- creo los reducers
c) crear los reducers para generar el store
npm install react-redux

crear en la carpeta reducers el archivo de loggedReducer.js y un counterReducer.js
en el loggedreducer le paso como parametros del reducer son el state y la action y lo mismo on el counterReducer
en el archivo index.js que esta dentro de la carpeta reducer entonces llamomos a los reducers creados

--- creacion del store: se crea en el index.js de todo el proyecto

  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
y pasar el Provider con la propiedad state

en app.js se agrega el {useSelector} y se hace un if ternario en donde si esta logueado se lo redirije a la home sino no

en  component>loginForm> hay que ejecutar el dispatch. El dispatch va a ajecutar una accion que ejecutara la logica de mi reducer y necesito disparar esas acciones importanto useDispatch. + importar  la accion que quiero ejecutar //ejemplo signIn
en el onSubmit de la validacion de yup del formulario // alert(JSON.stringfy(values, null, 2)) ____ en esta parte
generar una constante useDispatch y hay que pasarle como parametro la accion que queremos ejectuar

